# path to the checkpoint file containing the model
model_path: /model/ckpt/fdg_pib_res3dunet_p_norm.pytorch  # fdg_pib_finetune_w_dropout.pytorch # /model/ckpt/fdg_pib_frozen_resnet.pytorch
# model configuration
model:
  # model class
  name: ResidualUNet3D # UNet3D # M3T
  # number of input channels to the model
  in_channels: 2
  # number of classes
  out_channels: 16
  # determines the order of operators in a single layer (gcr - GroupNorm+Conv3d+ReLU)
  layer_order: gcr
  # feature maps scale factor
  f_maps: [ 32, 64, 128, 256 ]
  # number of groups in the groupnorm
  num_groups: 8
  # apply element-wise nn.Sigmoid after the final 1x1 convolution, otherwise apply nn.Softmax
  final_sigmoid: false
  # if True applies the final normalization layer (sigmoid or softmax), otherwise the networks returns the output from the final convolution layer; use False for regression problems, e.g. de-noising
  is_segmentation: false
# predictor configuration
predictor:
  # standard in memory predictor
  name: 'StandardPredictor'
  # save the output segmentation instead of probability maps, i.e. apply argmax to the output
  save_segmentation: false
# specify the test datasets
loaders:
  # batch dimension; if number of GPUs is N > 1, then a batch_size of N * batch_size will automatically be taken for DataParallel
  batch_size: 3
  # path to the raw data within the H5
  raw_internal_path: raw
  global_normalization: true
  # how many subprocesses to use for data loading
  feature_key: [FDG_PET_N, PIB_PET_N]
  num_workers: 16
  # test loaders configuration
  test:
    # paths to the test datasets; if a given path is a directory all H5 files ('*.h5', '*.hdf', '*.hdf5', '*.hd5')
    # inside this directory will be included as well (non-recursively)
    file_paths:
      - /data/processed/validation.hdf5

    # SliceBuilder configuration, i.e. how to iterate over the input volume patch-by-patch
    slice_builder:
      # SliceBuilder class
      name: SliceBuilder
      # train patch size given to the network (adapt to fit in your GPU mem, generally the bigger patch the better)
      # patch_shape: [ 80, 170, 170 ]
      # # train stride between patches
      # stride_shape: [ 80, 170, 170 ]
      # # halo around each patch
      # halo_shape: [ 16, 32, 32 ]

    transformer:
      raw:
        - name: PercentileNormalizer
          channelwise: true
        - name: ToTensor
          expand_dims: true